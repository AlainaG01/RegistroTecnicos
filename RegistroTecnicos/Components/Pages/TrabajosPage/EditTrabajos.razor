@page "/Tecnicos/Trabajos/Edit/{TrabajoId:int}"

@inject TrabajosService trabajosService
@inject TecnicosService tecnicoService
@inject ClientesService clienteService
@inject TrabajosDetalleService trabajoDetalleService
@inject PrioridadesService prioridadesService
@inject NavigationManager navigationManager
@rendermode InteractiveServer

@*HTML*@

<PageTitle>Edit</PageTitle>
<EditForm Model="Trabajo" OnValidSubmit="Modificar">
    <DataAnnotationsValidator />
    <ValidationSummary />
    @*Formulario*@
    <div class="container">
        <div class="shadow-lg">

            @*Header*@
            <div class="card-header">
                <h3>Modifiar Trabajo</h3>
            </div>
           
            @*Body*@
            <div class="card-body">

                @*Id*@
                <div class="col-4 ms-3">
                    <label class="form-label ms-4"><strong>TrabajoId</strong></label>
                    <InputNumber class="form-control"
                                 @bind-Value="Trabajo.TrabajoId" readonly></InputNumber>
                </div>

                @*Fecha*@
                <div class="col-4 ms-3">
                    <label class="form-label ms-4"><strong>Fecha</strong></label>
                    <InputDate class="form-control" @bind-Value="Trabajo.Fecha"></InputDate>
                </div>

                @*Cliente*@
                <div class="col-4 ms-3">
                    <label class="form-label ms-4"><strong>Cliente</strong></label>
                    <InputSelect class="form-select" @bind-Value="Trabajo.ClienteId">
                        <option ="" selected disabled>Elija una opci&oacute;n</option>
                        @foreach (var cliente in ListaClientes)
                        {
                            <option value="@cliente.ClienteId">@cliente.Nombres</option>
                        }
                    </InputSelect>
                </div>

                @*Tecnico*@
                <div class="col-4 ms-3">
                    <label class="form-label ms-4"><strong>Tecnico</strong></label>
                    <InputSelect class="form-select" @bind-Value="Trabajo.TecnicoId">
                        <option ="" selected disabled>Elija una opci&oacute;n</option>
                        @foreach (var tecnico in ListaTecnicos)
                        {
                            <option value="@tecnico.TecnicoId">@tecnico.Nombres</option>
                        }
                    </InputSelect>
                </div>

                @*Descripcion*@
                <div class="col-4 ms-3">
                    <label class="form-label ms-4"><strong>Descripci&oacute;n</strong></label>
                    <InputText class="form-control"
                               @bind-Value="Trabajo.Descripcion"></InputText>
                    <ValidationMessage For="(()=> Trabajo.Descripcion)" />
                </div>

                 @*Prioridad*@
                <div class="col-4 ms-3">
                    <label class="form-label ms-4"><strong>Prioridad</strong></label>
                    <InputSelect class="form-select" @bind-Value="Trabajo.PrioridadId">
                        <option ="" selected disabled>Elija una opci&oacute;n</option>
                        @foreach(var prioridad in ListaPrioridades)
                        {
                            <option value="@prioridad.PrioridadesId">@prioridad.Descripcion</option>
                        }
                    </InputSelect>
                </div>

                @*Monto*@
                <div class="col-4 ms-3">
                    <label class="form-label ms-4"><strong>Monto</strong></label>
                    <InputNumber class="form-control"
                                 @bind-Value="Trabajo.Monto"></InputNumber>
                    <ValidationMessage For="(()=> Trabajo.Monto)" />
                </div>

                @*Detalle*@
                <div class="border border-success p-3 mt-3">
                    <h5>Detalles de articulos utilizados</h5>

                    <div class="row">
                        <div class="col-auto">
                            <SeleccionarArticulo 
                                ListaArticulo="ListaArticulos"
                                ArticuloId="TrabajoDetalle.ArticuloId"
                                Cantidad="TrabajoDetalle.Cantidad"
                                Precio="TrabajoDetalle.Precio"
                                ArticuloSeleccionado="AgregarArticulo" />
                        </div>
                    </div>
                    <ul class="mt-3">
                        @foreach (var detalle in Trabajo.TrabajosDetalle)
                        {
                            <li class="mt-2">
                                Articulo ID: @detalle.ArticuloId -- @detalle.Articulo?.Descripcion -- Cantidad: @detalle.Cantidad
                                -- Precio:$ @detalle.Articulo.Precio -- PrecioTotal: $ @detalle.Precio
                                <button type="button" @onclick="() => Eliminar(detalle)" class="btn btn-outline-danger btn-sm ms-2 bi bi-trash"></button>
                            </li>
                        }
                    </ul>
                </div>
            </div>
            @*Footer*@
            <div class="card-footer text-center">
                <button type="button" class="btn btn-primary bi bi-arrow-90deg-left" @onclick="Volver"></button>
                <button type="submit" class="btn btn-success bi bi-floppy-fill"></button>
              
            </div>
        </div>
    </div>
</EditForm>
@Mensaje

@code {
    [Parameter]
    public int TrabajoId { get; set; }

    public Trabajos Trabajo { get; set; } = new Trabajos();
    public TrabajosDetalle TrabajoDetalle { get; set; } = new TrabajosDetalle();
    public string Mensaje { get; set; } = string.Empty;
    public List<Articulos> ListaArticulos { get; set; } = new List<Articulos>();
    public List<Clientes> ListaClientes { get; set; } = new List<Clientes>();
    public List<Tecnicos> ListaTecnicos { get; set; } = new List<Tecnicos>();
    public List<Prioridades> ListaPrioridades { get; set; } = new List<Prioridades>();

    protected override async Task OnInitializedAsync()
    {
        Trabajo = await trabajosService.BuscarConDetalles(TrabajoId);
        ListaClientes = await clienteService.Listar(e => e.ClienteId > 0);
        ListaTecnicos = await tecnicoService.Listar(t => t.TecnicoId > 0);
        ListaPrioridades = await prioridadesService.Listar(p => p.PrioridadesId > 0);
        ListaArticulos = await trabajoDetalleService.Listar(a => a.ArticuloId > 0);
    }

    public void Volver()
    {
        navigationManager.NavigateTo("/Tecnicos/Trabajos/Index");
    }

    public async Task Modificar()
    {
        var modificar = await trabajosService.Guardar(Trabajo);

        if (modificar)
        {
            Mensaje = "Se ha modificado correctamente";
            navigationManager.NavigateTo("/Tecnicos/Trabajos/Index");
        }
        else
        {
            Mensaje = "No se ha modificado correctamente";
        }
    }

    private async Task AgregarArticulo((Articulos articulos, int cantidad) selection)
    {

        await LimpiarMensaje();

        var articuloExistente = Trabajo.TrabajosDetalle
            .FirstOrDefault(d => d.ArticuloId == selection.articulos.ArticuloId);

        if (articuloExistente != null)
        {
            articuloExistente.Cantidad += selection.cantidad;
            articuloExistente.Costo = articuloExistente.Articulo.Costo * articuloExistente.Cantidad;
            articuloExistente.Precio = articuloExistente.Articulo.Precio * articuloExistente.Cantidad;
        }
        else
        {
            var Detalle = new TrabajosDetalle
                {
                    ArticuloId = selection.articulos.ArticuloId,
                    Cantidad = selection.cantidad,
                    Articulo = selection.articulos,
                    Costo = selection.articulos.Costo * selection.cantidad,
                    Precio = selection.articulos.Precio * selection.cantidad,
                    TrabajoId = Trabajo.TrabajoId
                };

            Trabajo.TrabajosDetalle.Add(Detalle);
        }

        TrabajoDetalle = new TrabajosDetalle();
        await Task.CompletedTask;
    }

    public async Task Eliminar(TrabajosDetalle detalle)
    {
        Trabajo.TrabajosDetalle.Remove(detalle);
       
        TrabajoDetalle.Cantidad = detalle.Cantidad;
        TrabajoDetalle.ArticuloId = detalle.ArticuloId;
    }

    public async Task LimpiarMensaje()
    {
        Mensaje = string.Empty;
    }
}